---
import Layout from '../../layouts/Layout.astro';
export const prerender = false;

// Get the product ID from the URL
const { id } = Astro.params;
---

<Layout title="Product Details - Akoma Apparel">
  <div id="product-root"></div>
  
  <script define:vars={{ productId: id }}>
    import React, { useState, useEffect } from 'react';
    import { createRoot } from 'react-dom/client';
    import { apiClient, type Product, handleApiError } from '../../utils/api';
    import { AuthProvider } from '../../contexts/AuthContext';
    import Navigation from '../../components/navigation/Navigation';

    function ProductDetail({ productId }) {
      const [product, setProduct] = useState(null);
      const [loading, setLoading] = useState(true);
      const [error, setError] = useState(null);
      const [addingToCart, setAddingToCart] = useState(false);

      useEffect(() => {
        if (productId) {
          fetchProduct();
        }
      }, [productId]);

      const fetchProduct = async () => {
        try {
          const response = await apiClient.getProduct(productId);
          
          if (response.success && response.data) {
            setProduct(response.data);
          } else {
            setError(handleApiError(response.error));
          }
        } catch (err) {
          setError('Failed to fetch product details');
        } finally {
          setLoading(false);
        }
      };

      const handleAddToCart = async () => {
        if (!product) return;
        
        setAddingToCart(true);
        try {
          const response = await apiClient.addToCart(product.id);
          
          if (response.success) {
            alert('Product added to cart successfully!');
          } else {
            alert(handleApiError(response.error));
          }
        } catch (err) {
          alert('Failed to add product to cart');
        } finally {
          setAddingToCart(false);
        }
      };

      if (loading) {
        return React.createElement('div', { className: 'container mt-5' },
          React.createElement('div', { className: 'text-center' },
            React.createElement('div', { className: 'spinner-border', role: 'status' },
              React.createElement('span', { className: 'visually-hidden' }, 'Loading...')
            ),
            React.createElement('p', { className: 'mt-2' }, 'Loading product details...')
          )
        );
      }

      if (error) {
        return React.createElement('div', { className: 'container mt-5' },
          React.createElement('div', { className: 'alert alert-danger', role: 'alert' },
            React.createElement('h4', { className: 'alert-heading' }, 'Error!'),
            React.createElement('p', null, error),
            React.createElement('a', { href: '/api-products', className: 'btn btn-outline-danger' }, 'Back to Products')
          )
        );
      }

      if (!product) {
        return React.createElement('div', { className: 'container mt-5' },
          React.createElement('div', { className: 'alert alert-warning', role: 'alert' },
            React.createElement('h4', { className: 'alert-heading' }, 'Product Not Found'),
            React.createElement('p', null, 'The requested product could not be found.'),
            React.createElement('a', { href: '/api-products', className: 'btn btn-primary' }, 'Browse Products')
          )
        );
      }

      return React.createElement('div', null,
        React.createElement(Navigation),
        React.createElement('div', { className: 'container mt-5' },
          React.createElement('nav', { 'aria-label': 'breadcrumb' },
            React.createElement('ol', { className: 'breadcrumb' },
              React.createElement('li', { className: 'breadcrumb-item' },
                React.createElement('a', { href: '/' }, 'Home')
              ),
              React.createElement('li', { className: 'breadcrumb-item' },
                React.createElement('a', { href: '/api-products' }, 'Products')
              ),
              React.createElement('li', { className: 'breadcrumb-item active', 'aria-current': 'page' }, 
                product.title
              )
            )
          ),
          
          React.createElement('div', { className: 'row' },
            React.createElement('div', { className: 'col-md-6' },
              React.createElement('div', { className: 'card' },
                React.createElement('img', {
                  src: product.thumb_src,
                  className: 'card-img-top',
                  alt: product.thumb_alt,
                  style: { height: '400px', objectFit: 'cover' }
                })
              )
            ),
            
            React.createElement('div', { className: 'col-md-6' },
              React.createElement('div', { className: 'ps-md-4' },
                React.createElement('h1', { className: 'mb-3' }, product.title),
                React.createElement('div', { className: 'mb-3' },
                  React.createElement('span', { className: 'h2 text-primary' }, '$', product.price.toFixed(2))
                ),
                
                product.description && React.createElement('div', { className: 'mb-4' },
                  React.createElement('h5', null, 'Description'),
                  React.createElement('p', { className: 'text-muted' }, product.description)
                ),
                
                React.createElement('div', { className: 'mb-4' },
                  React.createElement('div', { className: 'd-flex align-items-center mb-2' },
                    React.createElement('span', { 
                      className: `badge ${product.stock ? 'bg-success' : 'bg-danger'}` 
                    }, product.stock ? 'In Stock' : 'Out of Stock')
                  ),
                  
                  product.color && React.createElement('div', { className: 'mb-2' },
                    React.createElement('strong', null, 'Color: '),
                    React.createElement('span', null, product.color)
                  ),
                  
                  product.size && React.createElement('div', { className: 'mb-2' },
                    React.createElement('strong', null, 'Size: '),
                    React.createElement('span', null, product.size)
                  )
                ),
                
                React.createElement('div', { className: 'd-grid gap-2' },
                  React.createElement('button', {
                    className: 'btn btn-primary btn-lg',
                    onClick: handleAddToCart,
                    disabled: !product.stock || addingToCart
                  }, 
                    addingToCart ? 'Adding...' : 'Add to Cart'
                  ),
                  React.createElement('a', {
                    href: '/api-products',
                    className: 'btn btn-outline-secondary'
                  }, 'Continue Shopping')
                )
              )
            )
          ),
          
          React.createElement('div', { className: 'row mt-5' },
            React.createElement('div', { className: 'col-12' },
              React.createElement('h3', null, 'Product Information'),
              React.createElement('div', { className: 'card' },
                React.createElement('div', { className: 'card-body' },
                  React.createElement('div', { className: 'row' },
                    React.createElement('div', { className: 'col-md-6' },
                      React.createElement('h5', null, 'Details'),
                      React.createElement('ul', { className: 'list-unstyled' },
                        React.createElement('li', null, React.createElement('strong', null, 'Product ID: '), product.id),
                        React.createElement('li', null, React.createElement('strong', null, 'Price: '), '$', product.price.toFixed(2)),
                        React.createElement('li', null, React.createElement('strong', null, 'Availability: '), product.stock ? 'In Stock' : 'Out of Stock')
                      )
                    ),
                    React.createElement('div', { className: 'col-md-6' },
                      React.createElement('h5', null, 'Actions'),
                      React.createElement('div', { className: 'd-grid gap-2' },
                        React.createElement('a', { href: '/api-cart', className: 'btn btn-outline-primary' }, 'View Cart'),
                        React.createElement('a', { href: '/dashboard', className: 'btn btn-outline-info' }, 'My Account')
                      )
                    )
                  )
                )
              )
            )
          )
        )
      );
    }

    const App = () => {
      return React.createElement(AuthProvider, null,
        React.createElement(ProductDetail, { productId })
      );
    };

    const container = document.getElementById('product-root');
    if (container) {
      const root = createRoot(container);
      root.render(React.createElement(App));
    }
  </script>
</Layout>
